
DATA DIGGER - SQL QUESTIONS WITH ANSWERS
=========================================

1. Insert at least 5 sample customers into the Customers table.
   SQL:
   INSERT INTO Customers (Name, Email, Address) VALUES
   ('Alice', 'alice@example.com', 'New York'),
   ('Bob', 'bob@example.com', 'California'),
   ('Charlie', 'charlie@example.com', 'Texas'),
   ('David', 'david@example.com', 'Florida'),
   ('Eve', 'eve@example.com', 'Nevada');

2. Retrieve all customer details.
   SQL:
   SELECT * FROM Customers;

3. Update a customer's address.
   SQL:
   UPDATE Customers SET Address = 'Chicago' WHERE CustomerID = 2;

4. Delete a customer using their CustomerID.
   SQL:
   DELETE FROM Customers WHERE CustomerID = 5;

5. Display all customers whose name is 'Alice'.
   SQL:
   SELECT * FROM Customers WHERE Name = 'Alice';

6. Insert at least 5 sample orders into the Orders table.
   SQL:
   INSERT INTO Orders (CustomerID, OrderDate, TotalAmount) VALUES
   (1, '2025-07-01', 2000.00),
   (2, '2025-07-15', 1500.50),
   (3, '2025-07-20', 2200.75),
   (4, '2025-07-25', 1800.00),
   (1, '2025-07-30', 2500.00);

7. Retrieve all orders made by a specific customer.
   SQL:
   SELECT * FROM Orders WHERE CustomerID = 1;

8. Update an order’s total amount.
   SQL:
   UPDATE Orders SET TotalAmount = 2100.00 WHERE OrderID = 2;

9. Delete an order using its OrderID.
   SQL:
   DELETE FROM Orders WHERE OrderID = 3;

10. Retrieve orders placed in the last 30 days.
    SQL:
    SELECT * FROM Orders WHERE OrderDate >= CURDATE() - INTERVAL 30 DAY;

11. Retrieve the highest, lowest, and average order amount using aggregate functions.
    SQL:
    SELECT MAX(TotalAmount) AS Highest, MIN(TotalAmount) AS Lowest, AVG(TotalAmount) AS Average FROM Orders;

12. Insert at least 5 sample products into the Products table.
    SQL:
    INSERT INTO Products (ProductName, Price, Stock) VALUES
    ('Laptop', 50000.00, 10),
    ('Mouse', 700.00, 100),
    ('Keyboard', 1200.00, 80),
    ('Monitor', 15000.00, 20),
    ('Headphones', 2500.00, 0);

13. Retrieve all products sorted by price in descending order.
    SQL:
    SELECT * FROM Products ORDER BY Price DESC;

14. Update the price of a specific product.
    SQL:
    UPDATE Products SET Price = 55000.00 WHERE ProductID = 1;

15. Delete a product if it’s out of stock.
    SQL:
    DELETE FROM Products WHERE Stock = 0;

16. Retrieve products whose price is between ₹500 and ₹2000.
    SQL:
    SELECT * FROM Products WHERE Price BETWEEN 500 AND 2000;

17. Retrieve the most expensive and cheapest product using MAX() and MIN().
    SQL:
    SELECT MAX(Price) AS MaxPrice, MIN(Price) AS MinPrice FROM Products;

18. Insert at least 5 sample records into the OrderDetails table.
    SQL:
    INSERT INTO OrderDetails (OrderID, ProductID, Quantity, SubTotal) VALUES
    (1, 1, 1, 50000.00),
    (1, 2, 2, 1400.00),
    (2, 3, 1, 1200.00),
    (4, 4, 1, 15000.00),
    (5, 5, 2, 5000.00);

19. Retrieve all order details for a specific order.
    SQL:
    SELECT * FROM OrderDetails WHERE OrderID = 1;

20. Calculate the total revenue generated from all orders using SUM().
    SQL:
    SELECT SUM(SubTotal) AS TotalRevenue FROM OrderDetails;

21. Retrieve the top 3 most ordered products.
    SQL:
    SELECT ProductID, SUM(Quantity) AS TotalQty
    FROM OrderDetails
    GROUP BY ProductID
    ORDER BY TotalQty DESC
    LIMIT 3;

22. Count how many times a specific product has been sold using COUNT().
    SQL:
    SELECT ProductID, COUNT(*) AS TimesSold
    FROM OrderDetails
    GROUP BY ProductID;

===============================================================================================================
	OUTPUT OF ALL QUERY :--
	~~~~~~~~~~~~~~~~~~~~~~~~

mysql> source D:\\MySQL\\data_digger.sql
Query OK, 4 rows affected (0.091 sec)
Records: 4  Duplicates: 0  Warnings: 0

Query OK, 0 rows affected (0.003 sec)

+------------+---------+---------------------+------------+
| CustomerID | Name    | Email               | Address    |
+------------+---------+---------------------+------------+
|          1 | Alice   | alice@example.com   | New York   |
|          2 | Bob     | bob@example.com     | Chicago    |
|          3 | Charlie | charlie@example.com | Texas      |
|          4 | David   | david@example.com   | Florida    |
|          6 | Alice   | alice@example.com   | New York   |
|          7 | Bob     | bob@example.com     | California |
|          8 | Charlie | charlie@example.com | Texas      |
|          9 | David   | david@example.com   | Florida    |
|         10 | Eve     | eve@example.com     | Nevada     |
|         11 | Alice   | alice@example.com   | New York   |
|         12 | Bob     | bob@example.com     | California |
|         13 | Charlie | charlie@example.com | Texas      |
|         14 | David   | david@example.com   | Florida    |
|         15 | Eve     | eve@example.com     | Nevada     |
|         16 | Alice   | alice@example.com   | New York   |
|         17 | Bob     | bob@example.com     | California |
|         18 | Charlie | charlie@example.com | Texas      |
|         19 | David   | david@example.com   | Florida    |
|         20 | Eve     | eve@example.com     | Nevada     |
|         21 | Alice   | alice@example.com   | New York   |
|         22 | Bob     | bob@example.com     | California |
|         23 | Charlie | charlie@example.com | Texas      |
|         24 | David   | david@example.com   | Florida    |
|         25 | Eve     | eve@example.com     | Nevada     |
+------------+---------+---------------------+------------+
24 rows in set (0.037 sec)

Query OK, 0 rows affected (0.002 sec)

Query OK, 0 rows affected (0.048 sec)
Rows matched: 1  Changed: 0  Warnings: 0

Query OK, 0 rows affected (0.001 sec)

+------------+-------+-------------------+----------+
| CustomerID | Name  | Email             | Address  |
+------------+-------+-------------------+----------+
|          1 | Alice | alice@example.com | New York |
|          6 | Alice | alice@example.com | New York |
|         11 | Alice | alice@example.com | New York |
|         16 | Alice | alice@example.com | New York |
|         21 | Alice | alice@example.com | New York |
+------------+-------+-------------------+----------+
5 rows in set (0.011 sec)

Query OK, 0 rows affected (0.002 sec)

+---------+------------+------------+-------------+
| OrderID | CustomerID | OrderDate  | TotalAmount |
+---------+------------+------------+-------------+
|       1 |          1 | 2025-07-01 |     2000.00 |
|       5 |          1 | 2025-07-30 |     2500.00 |
|       6 |          1 | 2025-07-01 |     2000.00 |
|      10 |          1 | 2025-07-30 |     2500.00 |
|      11 |          1 | 2025-07-01 |     2000.00 |
|      15 |          1 | 2025-07-30 |     2500.00 |
|      16 |          1 | 2025-07-01 |     2000.00 |
|      20 |          1 | 2025-07-30 |     2500.00 |
|      21 |          1 | 2025-07-01 |     2000.00 |
|      25 |          1 | 2025-07-30 |     2500.00 |
+---------+------------+------------+-------------+
10 rows in set (0.014 sec)

Query OK, 0 rows affected (0.001 sec)

+---------+------------+------------+-------------+
| OrderID | CustomerID | OrderDate  | TotalAmount |
+---------+------------+------------+-------------+
|       2 |          2 | 2025-07-15 |     2100.00 |
|       4 |          4 | 2025-07-25 |     1800.00 |
|       5 |          1 | 2025-07-30 |     2500.00 |
|       7 |          2 | 2025-07-15 |     1500.50 |
|       8 |          3 | 2025-07-20 |     2200.75 |
|       9 |          4 | 2025-07-25 |     1800.00 |
|      10 |          1 | 2025-07-30 |     2500.00 |
|      12 |          2 | 2025-07-15 |     1500.50 |
|      13 |          3 | 2025-07-20 |     2200.75 |
|      14 |          4 | 2025-07-25 |     1800.00 |
|      15 |          1 | 2025-07-30 |     2500.00 |
|      17 |          2 | 2025-07-15 |     1500.50 |
|      18 |          3 | 2025-07-20 |     2200.75 |
|      19 |          4 | 2025-07-25 |     1800.00 |
|      20 |          1 | 2025-07-30 |     2500.00 |
|      22 |          2 | 2025-07-15 |     1500.50 |
|      23 |          3 | 2025-07-20 |     2200.75 |
|      24 |          4 | 2025-07-25 |     1800.00 |
|      25 |          1 | 2025-07-30 |     2500.00 |
+---------+------------+------------+-------------+
19 rows in set (0.021 sec)

Query OK, 0 rows affected (0.002 sec)

+---------+---------+-------------+
| Highest | Lowest  | Average     |
+---------+---------+-------------+
| 2500.00 | 1500.50 | 2016.875000 |
+---------+---------+-------------+
1 row in set (0.028 sec)

Query OK, 0 rows affected (0.001 sec)

+-----------+-------------+----------+-------+
| ProductID | ProductName | Price    | Stock |
+-----------+-------------+----------+-------+
|         1 | Laptop      | 55000.00 |    10 |
|         6 | Laptop      | 50000.00 |    10 |
|        11 | Laptop      | 50000.00 |    10 |
|        16 | Laptop      | 50000.00 |    10 |
|        20 | Laptop      | 50000.00 |    10 |
|         4 | Monitor     | 15000.00 |    20 |
|         9 | Monitor     | 15000.00 |    20 |
|        14 | Monitor     | 15000.00 |    20 |
|        19 | Monitor     | 15000.00 |    20 |
|        23 | Monitor     | 15000.00 |    20 |
|         3 | Keyboard    |  1200.00 |    80 |
|         8 | Keyboard    |  1200.00 |    80 |
|        13 | Keyboard    |  1200.00 |    80 |
|        18 | Keyboard    |  1200.00 |    80 |
|        22 | Keyboard    |  1200.00 |    80 |
|         2 | Mouse       |   700.00 |   100 |
|         7 | Mouse       |   700.00 |   100 |
|        12 | Mouse       |   700.00 |   100 |
|        17 | Mouse       |   700.00 |   100 |
|        21 | Mouse       |   700.00 |   100 |
+-----------+-------------+----------+-------+
20 rows in set (0.007 sec)

Query OK, 0 rows affected (0.003 sec)
Rows matched: 1  Changed: 0  Warnings: 0

Query OK, 0 rows affected (0.001 sec

+-----------+-------------+---------+-------+
| ProductID | ProductName | Price   | Stock |
+-----------+-------------+---------+-------+
|         2 | Mouse       |  700.00 |   100 |
|         3 | Keyboard    | 1200.00 |    80 |
|         7 | Mouse       |  700.00 |   100 |
|         8 | Keyboard    | 1200.00 |    80 |
|        12 | Mouse       |  700.00 |   100 |
|        13 | Keyboard    | 1200.00 |    80 |
|        17 | Mouse       |  700.00 |   100 |
|        18 | Keyboard    | 1200.00 |    80 |
|        21 | Mouse       |  700.00 |   100 |
|        22 | Keyboard    | 1200.00 |    80 |
+-----------+-------------+---------+-------+
10 rows in set (0.006 sec)

Query OK, 0 rows affected (0.002 sec)

+----------+----------+
| MaxPrice | MinPrice |
+----------+----------+
| 55000.00 |   700.00 |
+----------+----------+
1 row in set (0.004 sec)

Query OK, 0 rows affected (0.002 sec)

+---------------+---------+-----------+----------+----------+
| OrderDetailID | OrderID | ProductID | Quantity | SubTotal |
+---------------+---------+-----------+----------+----------+
|            16 |       1 |         1 |        1 | 50000.00 |
|            17 |       1 |         2 |        2 |  1400.00 |
|            20 |       1 |         1 |        1 | 50000.00 |
|            21 |       1 |         2 |        2 |  1400.00 |
+---------------+---------+-----------+----------+----------+
4 rows in set (0.005 sec)

Query OK, 0 rows affected (0.001 sec)

+--------------+
| TotalRevenue |
+--------------+
|    135200.00 |
+--------------+
1 row in set (0.003 sec)

Query OK, 0 rows affected (0.001 sec)

+-----------+----------+
| ProductID | TotalQty |
+-----------+----------+
|         2 |        4 |
|         1 |        2 |
|         3 |        2 |
+-----------+----------+
3 rows in set (0.012 sec)

Query OK, 0 rows affected (0.002 sec)

+-----------+-----------+
| ProductID | TimesSold |
+-----------+-----------+
|         1 |         2 |
|         2 |         2 |
|         3 |         2 |
|         4 |         2 |
+-----------+-----------+
4 rows in set (0.002 sec)