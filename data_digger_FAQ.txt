
DATA DIGGER - SQL QUESTIONS WITH ANSWERS
=========================================

1. Insert at least 5 sample customers into the Customers table.
   SQL:
   INSERT INTO Customers (Name, Email, Address) VALUES
   ('Alice', 'alice@example.com', 'New York'),
   ('Bob', 'bob@example.com', 'California'),
   ('Charlie', 'charlie@example.com', 'Texas'),
   ('David', 'david@example.com', 'Florida'),
   ('Eve', 'eve@example.com', 'Nevada');

2. Retrieve all customer details.
   SQL:
   SELECT * FROM Customers;

3. Update a customer's address.
   SQL:
   UPDATE Customers SET Address = 'Chicago' WHERE CustomerID = 2;

4. Delete a customer using their CustomerID.
   SQL:
   DELETE FROM Customers WHERE CustomerID = 5;

5. Display all customers whose name is 'Alice'.
   SQL:
   SELECT * FROM Customers WHERE Name = 'Alice';

6. Insert at least 5 sample orders into the Orders table.
   SQL:
   INSERT INTO Orders (CustomerID, OrderDate, TotalAmount) VALUES
   (1, '2025-07-01', 2000.00),
   (2, '2025-07-15', 1500.50),
   (3, '2025-07-20', 2200.75),
   (4, '2025-07-25', 1800.00),
   (1, '2025-07-30', 2500.00);

7. Retrieve all orders made by a specific customer.
   SQL:
   SELECT * FROM Orders WHERE CustomerID = 1;

8. Update an order’s total amount.
   SQL:
   UPDATE Orders SET TotalAmount = 2100.00 WHERE OrderID = 2;

9. Delete an order using its OrderID.
   SQL:
   DELETE FROM Orders WHERE OrderID = 3;

10. Retrieve orders placed in the last 30 days.
    SQL:
    SELECT * FROM Orders WHERE OrderDate >= CURDATE() - INTERVAL 30 DAY;

11. Retrieve the highest, lowest, and average order amount using aggregate functions.
    SQL:
    SELECT MAX(TotalAmount) AS Highest, MIN(TotalAmount) AS Lowest, AVG(TotalAmount) AS Average FROM Orders;

12. Insert at least 5 sample products into the Products table.
    SQL:
    INSERT INTO Products (ProductName, Price, Stock) VALUES
    ('Laptop', 50000.00, 10),
    ('Mouse', 700.00, 100),
    ('Keyboard', 1200.00, 80),
    ('Monitor', 15000.00, 20),
    ('Headphones', 2500.00, 0);

13. Retrieve all products sorted by price in descending order.
    SQL:
    SELECT * FROM Products ORDER BY Price DESC;

14. Update the price of a specific product.
    SQL:
    UPDATE Products SET Price = 55000.00 WHERE ProductID = 1;

15. Delete a product if it’s out of stock.
    SQL:
    DELETE FROM Products WHERE Stock = 0;

16. Retrieve products whose price is between ₹500 and ₹2000.
    SQL:
    SELECT * FROM Products WHERE Price BETWEEN 500 AND 2000;

17. Retrieve the most expensive and cheapest product using MAX() and MIN().
    SQL:
    SELECT MAX(Price) AS MaxPrice, MIN(Price) AS MinPrice FROM Products;

18. Insert at least 5 sample records into the OrderDetails table.
    SQL:
    INSERT INTO OrderDetails (OrderID, ProductID, Quantity, SubTotal) VALUES
    (1, 1, 1, 50000.00),
    (1, 2, 2, 1400.00),
    (2, 3, 1, 1200.00),
    (4, 4, 1, 15000.00),
    (5, 5, 2, 5000.00);

19. Retrieve all order details for a specific order.
    SQL:
    SELECT * FROM OrderDetails WHERE OrderID = 1;

20. Calculate the total revenue generated from all orders using SUM().
    SQL:
    SELECT SUM(SubTotal) AS TotalRevenue FROM OrderDetails;

21. Retrieve the top 3 most ordered products.
    SQL:
    SELECT ProductID, SUM(Quantity) AS TotalQty
    FROM OrderDetails
    GROUP BY ProductID
    ORDER BY TotalQty DESC
    LIMIT 3;

22. Count how many times a specific product has been sold using COUNT().
    SQL:
    SELECT ProductID, COUNT(*) AS TimesSold
    FROM OrderDetails
    GROUP BY ProductID;
